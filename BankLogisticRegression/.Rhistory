testing_set[-12]
prob_predict=predict(classifier,type = 'response',newdata = testing_set[-11])
classifier=glm(formula = y~.,family = binomial,data =training_set)
summary(classifier)
prob_predict=predict(classifier,type = 'response',newdata = testing_set[-11])
y_pred=ifelse(prob_predict>0.5,1,2)
library(caret)
confusionMatrix(table(y_pred, testing_set$y))
dataset <- read.table("bank-additional-full.csv",
sep = ";",
header = T)
dataset=subset(dataset, select=-c(pdays,duration,euribor3m,nr.employed,
job,loan,previous,age,marital,education,housing))
dataset=subset(dataset,default!='yes')
dataset$default=factor(dataset$default,
levels = (unique(dataset$default)),
labels = (seq(1,length(unique(dataset$default)),by=1))
)
dataset$housing=factor(dataset$housing,
levels = (unique(dataset$housing)),
labels = (seq(1,length(unique(dataset$housing)),by=1))
)
dataset <- read.table("bank-additional-full.csv",
sep = ";",
header = T)
dataset=subset(dataset, select=-c(pdays,duration,euribor3m,nr.employed,
job,loan,previous,age,marital,education,housing))
dataset=subset(dataset,default!='yes')
dataset$marital = factor(dataset$marital,
levels = (unique(dataset$marital)),
labels = (seq(1, length(
unique(dataset$marital)
), by = 1)))
dataset <- read.table("bank-additional-full.csv",
sep = ";",
header = T)
dataset=subset(dataset, select=-c(pdays,duration,euribor3m,nr.employed,
job,loan,previous,age,marital,education,housing))
dataset=subset(dataset,default!='yes')
dataset$default=factor(dataset$default,
levels = (unique(dataset$default)),
labels = (seq(1,length(unique(dataset$default)),by=1))
)
dataset$contact = factor(dataset$contact,
levels = (unique(dataset$contact)),
labels = (seq(1, length(
unique(dataset$contact)
), by = 1)))
dataset$month = factor(dataset$month,
levels = (unique(dataset$month)),
labels = (seq(1, length(
unique(dataset$month)
), by = 1)))
dataset$day_of_week = factor(dataset$day_of_week,
levels = (unique(dataset$day_of_week)),
labels = (seq(1, length(
unique(dataset$day_of_week)
), by = 1)))
dataset$poutcome = factor(dataset$poutcome,
levels = (unique(dataset$poutcome)),
labels = (seq(1, length(
unique(dataset$poutcome)
), by = 1)))
dataset$y= factor(dataset$y,
levels = c('yes','no'),
labels =c(1,2)
)
library(caTools)
set.seed(123)
split=sample.split(dataset$y,SplitRatio = 0.8)
training_set=subset(dataset,split==TRUE)
testing_set=subset(dataset,split==FALSE)
training_set$campaign=scale(training_set$campaign)
training_set$emp.var.rate=scale(training_set$emp.var.rate)
training_set$cons.price.idx=scale(training_set$cons.price.idx)
training_set$cons.conf.idx=scale(training_set$cons.conf.idx)
testing_set$campaign=scale(testing_set$campaign)
testing_set$emp.var.rate=scale(testing_set$emp.var.rate)
testing_set$cons.price.idx=scale(testing_set$cons.price.idx)
testing_set$cons.conf.idx=scale(testing_set$cons.conf.idx)
classifier=glm(formula = y~.,family = binomial,data =training_set)
summary(classifier)
testing_set[-10]
prob_predict=predict(classifier,type = 'response',newdata = testing_set[-10])
y_pred=ifelse(prob_predict>0.5,1,2)
confusionMatrix(table(y_pred, testing_set$y))
prob_predict
View(testing_set)
prob_predict=predict(classifier,type = 'response',newdata = testing_set[-10])
prob_predict
y_pred=ifelse(prob_predict>0.9,1,2)
confusionMatrix(table(y_pred, testing_set$y))
library(ROCR)
install.packages('ROCR')
library(ROCR)
eval<-performance(y_pred,testing_set$y)
plot(eval)
prob_predict=predict(classifier,type = 'response',newdata = testing_set[-10])
y_pred=ifelse(prob_predict>0.5,1,2)
confusionMatrix(table(y_pred, testing_set$y))
eval<-performance(y_pred,testing_set$y)
plot(eval)
eval<-performance(y_pred,"acc")
plot(eval)
cm = table(testing_set, y_pred > 0.5)
cm = table(testing_set, y_pred > 0.5)
y_pred=ifelse(prob_predict>0.5,2,1)
confusionMatrix(table(y_pred, testing_set$y))
y_pred=ifelse(prob_predict>0.8,1,2)
confusionMatrix(table(y_pred, testing_set$y))
prob_predict=predict(classifier,type = 'response',newdata = testing_set[-10])
y_pred=ifelse(prob_predict>0.91,1,2)
confusionMatrix(table(y_pred, testing_set$y))
y_pred=ifelse(prob_predict>0.6,1,2)
confusionMatrix(table(y_pred, testing_set$y))
cm = table(testing_set, y_pred > 0.5)
cm = table(sort(testing_set), y_pred > 0.5)
dataset <- read.table("bank-additional-full.csv",
sep = ";",
header = T)
dataset=subset(dataset, select=-c(pdays,duration,euribor3m,nr.employed,
job,loan,previous,age,marital,education,housing))
dataset=subset(dataset,default!='yes')
dataset$education = factor(dataset$education,
levels = (unique(dataset$education)),
labels = (seq(1, length(
unique(dataset$education)
), by = 1)))
dataset <- read.table("bank-additional-full.csv",
sep = ";",
header = T)
dataset=subset(dataset, select=-c(pdays,duration,euribor3m,nr.employed,
job,loan,previous,age,marital,education,housing))
dataset=subset(dataset,default!='yes')
dataset$default=factor(dataset$default,
levels = (unique(dataset$default)),
labels = (seq(1,length(unique(dataset$default)),by=1))
)
dataset$housing=factor(dataset$housing,
levels = (unique(dataset$housing)),
labels = (seq(1,length(unique(dataset$housing)),by=1))
)
dataset=subset(dataset, select=-c(pdays,duration,euribor3m,nr.employed,
job,loan,previous,age,marital,education,housing))
dataset=subset(dataset, select=-c(pdays,duration,euribor3m,nr.employed,
job,loan,previous,age,marital,education,housing))
dataset <- read.table("bank-additional-full.csv",
sep = ";",
header = T)
dataset=subset(dataset, select=-c(pdays,duration,euribor3m,nr.employed,
job,loan,previous,age,marital,education,housing))
dataset=subset(dataset,default!='yes')
dataset$default=factor(dataset$default,
levels = (unique(dataset$default)),
labels = (seq(1,length(unique(dataset$default)),by=1))
)
dataset$contact = factor(dataset$contact,
levels = (unique(dataset$contact)),
labels = (seq(1, length(
unique(dataset$contact)
), by = 1)))
sum(is.na(dataset$contact))
#Month
dataset$month = factor(dataset$month,
levels = (unique(dataset$month)),
labels = (seq(1, length(
unique(dataset$month)
), by = 1)))
sum(is.na(dataset$month))
#day_of_week
dataset$day_of_week = factor(dataset$day_of_week,
levels = (unique(dataset$day_of_week)),
labels = (seq(1, length(
unique(dataset$day_of_week)
), by = 1)))
sum(is.na(dataset$day_of_week))
#poutcome
dataset$poutcome = factor(dataset$poutcome,
levels = (unique(dataset$poutcome)),
labels = (seq(1, length(
unique(dataset$poutcome)
), by = 1)))
sum(is.na(dataset$poutcome))
# y This is the dependent variable
dataset$y= factor(dataset$y,
levels = c('yes','no'),
labels =c(1,2)
)
sum(is.na(dataset$y))
#summary(dataset)
dataset$contact = factor(dataset$contact,
levels = (unique(dataset$contact)),
labels = (seq(1, length(
unique(dataset$contact)
), by = 1)))
sum(is.na(dataset$contact))
#Month
dataset$month = factor(dataset$month,
levels = (unique(dataset$month)),
labels = (seq(1, length(
unique(dataset$month)
), by = 1)))
sum(is.na(dataset$month))
#day_of_week
dataset$day_of_week = factor(dataset$day_of_week,
levels = (unique(dataset$day_of_week)),
labels = (seq(1, length(
unique(dataset$day_of_week)
), by = 1)))
sum(is.na(dataset$day_of_week))
#poutcome
dataset$poutcome = factor(dataset$poutcome,
levels = (unique(dataset$poutcome)),
labels = (seq(1, length(
unique(dataset$poutcome)
), by = 1)))
sum(is.na(dataset$poutcome))
# y This is the dependent variable
dataset$y= factor(dataset$y,
levels = c('yes','no'),
labels =c(1,2)
)
sum(is.na(dataset$y))
#summary(dataset)
library(caTools)
set.seed(123)
split=sample.split(dataset$y,SplitRatio = 0.8)
training_set=subset(dataset,split==TRUE)
testing_set=subset(dataset,split==FALSE)
library(caTools)
set.seed(123)
split=sample.split(dataset$y,SplitRatio = 0.8)
training_set=subset(dataset,split==TRUE)
testing_set=subset(dataset,split==FALSE)
training_set$campaign=scale(training_set$campaign)
training_set$emp.var.rate=scale(training_set$emp.var.rate)
training_set$cons.price.idx=scale(training_set$cons.price.idx)
training_set$cons.conf.idx=scale(training_set$cons.conf.idx)
testing_set$campaign=scale(testing_set$campaign)
testing_set$emp.var.rate=scale(testing_set$emp.var.rate)
testing_set$cons.price.idx=scale(testing_set$cons.price.idx)
testing_set$cons.conf.idx=scale(testing_set$cons.conf.idx)
classifier=glm(formula = y~.,family = binomial,data =training_set)
dataset <- read.table("bank-additional-full.csv",
sep = ";",
header = T)
dataset=subset(dataset, select=-c(pdays,duration,euribor3m,nr.employed,
job,loan,previous,age,marital,education,housing))
dataset=subset(dataset,default!='yes')
dataset$default=factor(dataset$default,
levels = (unique(dataset$default)),
labels = (seq(1,length(unique(dataset$default)),by=1))
)
sum(is.na(dataset$default))
dataset$contact = factor(dataset$contact,
levels = (unique(dataset$contact)),
labels = (seq(1, length(
unique(dataset$contact)
), by = 1)))
sum(is.na(dataset$contact))
#Month
dataset$month = factor(dataset$month,
levels = (unique(dataset$month)),
labels = (seq(1, length(
unique(dataset$month)
), by = 1)))
sum(is.na(dataset$month))
#day_of_week
dataset$day_of_week = factor(dataset$day_of_week,
levels = (unique(dataset$day_of_week)),
labels = (seq(1, length(
unique(dataset$day_of_week)
), by = 1)))
sum(is.na(dataset$day_of_week))
#poutcome
dataset$poutcome = factor(dataset$poutcome,
levels = (unique(dataset$poutcome)),
labels = (seq(1, length(
unique(dataset$poutcome)
), by = 1)))
sum(is.na(dataset$poutcome))
# y This is the dependent variable
dataset$y= factor(dataset$y,
levels = c('yes','no'),
labels =c(1,2)
)
sum(is.na(dataset$y))
library(caTools)
set.seed(123)
split=sample.split(dataset$y,SplitRatio = 0.8)
training_set=subset(dataset,split==TRUE)
testing_set=subset(dataset,split==FALSE)
training_set$campaign=scale(training_set$campaign)
training_set$emp.var.rate=scale(training_set$emp.var.rate)
training_set$cons.price.idx=scale(training_set$cons.price.idx)
training_set$cons.conf.idx=scale(training_set$cons.conf.idx)
testing_set$campaign=scale(testing_set$campaign)
testing_set$emp.var.rate=scale(testing_set$emp.var.rate)
testing_set$cons.price.idx=scale(testing_set$cons.price.idx)
testing_set$cons.conf.idx=scale(testing_set$cons.conf.idx)
classifier=glm(formula = y~.,family = binomial,data =training_set)
summary(classifier)
summary(testing_set)
prob_predict=predict(classifier,type = 'response',newdata = testing_set[-10])
prob_predict
View(testing_set)
y_pred=ifelse(prob_predict>0.5,1,2)
confusionMatrix(table(y_pred, testing_set$y))
library('Information')
install.packages('Information')
library('Information')
infoTables <- create_infotables(data = dataSet,
y = "y",
bins = 10,
parallel = T)
infoTables <- create_infotables(data = dataset,
y = "y",
bins = 10,
parallel = T)
infoTables <- create_infotables(data = dataset,
y = dataset$y,
bins = 10,
parallel = T)
infoTables <- create_infotables(data = dataset)
dataSet <- read.table('bank-additional-full.csv',
header = T,
strip.white = F,
sep = ";")
str(dataSet)
dataSet$y <- recode(dataSet$y,
'yes' = 1,
'no' = 0)
library(car)
dataSet$y <- recode(dataSet$y,
'yes' = 1,
'no' = 0)
dataset$y
dataset <- read.table("bank-additional-full.csv",
sep = ";",
header = T)
View(dataset)
dataset <- read.table("bank-additional-full.csv",
sep = ";",
header = T)
View(dataset)
str(dataSet)
str(dataSet)
str(dataset)
View(dataset)
View(dataset)
dataSet$y <- recode(dataSet$y,
'yes' = 1,
'no' = 0)
dataset$y
library(car)
dataSet$y <- recode(dataSet$y)
unique(dataset$y)
dataSet$y <- recode(dataSet$y,
'yes' = 1,
'no' = 0)
table(dataSet$y)
table(dataset$y)
dataSet$y <- recode(dataSet$y,
'yes' = 1,
'no' = 0)
dataSet$y <- recode(dataSet$y,
'yes' = 1,
'no' = 0)
dataSet <- read.table('bank-additional-full.csv',
header = T,
strip.white = F,
sep = ";")
dataSet <- read.table('bank-additional-full.csv',
header = T,
strip.white = F,
sep = ";")
str(dataSet)
table(dataSet$y)
dataSet$y <- recode(dataSet$y,
"'yes' = 1,
'no' = 0")
dataSet$y <- recode(dataSet$y,"1:'yes',2:'no'")
dataset$y= factor(dataset$y,
levels = c('yes','no'),
labels =c(1,2)
)
dataSet$y= factor(dataSet$y,
levels = c('yes','no'),
labels =c(1,2)
)
bins <- 10
q <- quantile(dataSet$age,
probs = c(1:(bins - 1)/bins),
na.rm = TRUE,
type = 3)
cuts <- unique(q)
aggAge <- table(findInterval(dataSet$age,
vec = cuts,
rightmost.closed = FALSE),
dataSet$y)
aggAge <- as.data.frame.matrix(aggAge)
aggAge$N <- rowSums(aggAge)
aggAge$WOE <- log((aggAge$`1`*sum(aggAge$`0`))/(aggAge$`0`*sum(aggAge$`1`)))
library('Information')
dataset <- read.table("bank-additional-full.csv",
sep = ";",
header = T)
WOE(dataset$education,dataset$y)
WOE(X=dataset$education,Y=dataset$y)
library(devtools)
install_github("riv","tomasgreif")
library(woe)
library(devtools)
install.packages('devtools')
install.packages('devtools')
library(devtools)
install.packages('devtools')
install.packages('devtools')
install.packages('devtools')
install.packages('devtools')
library(devtools)
install_github("riv","tomasgreif")
library(woe)
iv.mult(german_data,"gb",TRUE)
iv.mult(dataset,"gb",TRUE)
german_data
typeof(german_data)
typeof(dataset)
iv.mult(dataset,"gb",TRUE)
iv.mult(dataset,dataset$y,TRUE)
iv.plot.summary(iv.mult(german_data,"gb",TRUE))
summary(german_data)
iv.mult(dataset,"gb")
iv.mult(dataset,1)
iv.str(dataset,dataset$education)
dataset <- read.table("bank-additional-full.csv",
sep = ";",
header = T)
dataset=subset(dataset,default!='yes')
dataset=subset(dataset,marital!='unknown')
#education
dataset$education = factor(dataset$education,
levels = (unique(dataset$education)),
labels = (seq(1, length(
unique(dataset$education)
), by = 1)))
sum(is.na(dataset$education))
iv.str(dataset,dataset$education)
dataset <- read.table("bank-additional-full.csv",
sep = ";",
header = T)
iv.str(dataset,dataset$education)
library(Information)
options(scipen=10)
### Loading the data
data(train, package="Information")
data(valid, package="Information")
train
View(train)
dataSet <- read.table(‘bank-additional-full.csv’,
header = T,
strip.white = F,
sep = “;”)
dataset <- read.table("bank-additional-full.csv",
sep = ";",
header = T)
str(dataSet)
str(dataSet)
dataSet <- read.table("bank-additional-full.csv",
sep = ";",
header = T)
str(dataSet)
table(dataSet$y)
dataSet$y <- recode(dataSet$y,
‘yes’ = 1,
‘no’ = 0)
dataSet$y <- recode(dataSet$y,
'yes' = 1,
'no' = 0)
dataset$y= factor(dataset$y,
levels = c('yes','no'),
labels =c(1,0)
)
bins <- 10
q <- quantile(dataSet$age,
probs = c(1:(bins – 1)/bins),
na.rm = TRUE,
type = 3)
q <- quantile(dataSet$age,probs = c(1:(bins – 1)/bins),na.rm = TRUE,type = 3)
q<-quantile(dataset$age,probs = c(1:(bins-1)/bins))
cuts <- unique(q)
aggAge <- table(findInterval(dataSet$age,vec = cuts,rightmost.closed = FALSE),dataSet$y)
infoTables <- create_infotables(data = dataSet,
y = “y”,
bins = 10,
parallel = T)
# – WOE table:
infoTables$Tables$age$WOE
infoTables <- create_infotables(data = dataSet,
y = “y”,
bins = 10,
parallel = T)
# – WOE table:
infoTables$Tables$age$WOE
infoTables<-create_infotables(data = dataset,y='y',bins = 10,parallel = TRUE)
dataset$y= factor(dataset$y,
levels = c('yes','no'),
labels =c(1,2)
)
dataset <- read.table("bank-additional-full.csv",
sep = ";",
header = T)
